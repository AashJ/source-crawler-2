import { useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { fetchEventSource } from "@microsoft/fetch-event-source";

import ChatBox, { type Inputs } from "~/components/Chat/ChatBox";
import { type Message } from "~/components/Chat/types";

const Home: NextPage = () => {
  const [url, setUrl] = useState("");

  const [loading, setLoading] = useState<boolean>(false);
  const [sourceDocs, setSourceDocs] = useState<Document[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [messages, setMessages] = useState<{
    messages: Message[];
    pending?: string;
    history: [string, string][];
    pendingSourceDocs?: Document[];
  }>({
    messages: [
      {
        message: "Welcome to the chatbot! Ask me anything!",
        type: "reply",
      },
    ],
    history: [],
    pendingSourceDocs: [],
  });

  function handleSubmit(data: Inputs) {
    setError(null);

    const question = data.message.trim();

    setMessages((state) => ({
      ...state,
      messages: [
        ...state.messages,
        {
          type: "message",
          message: question,
        },
      ],
      pending: undefined,
    }));

    setLoading(true);
    setMessages((state) => ({ ...state, pending: "" }));

    const ctrl = new AbortController();

    try {
      void fetchEventSource("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          question,
          history,
        }),
        signal: ctrl.signal,
        onmessage: (event) => {
          if (event.data === "[DONE]") {
            setMessages((state) => ({
              history: [...state.history, [question, state.pending ?? ""]],
              messages: [
                ...state.messages,
                {
                  type: "reply",
                  message: state.pending ?? "",
                  sourceDocs: state.pendingSourceDocs,
                },
              ],
              pending: undefined,
              pendingSourceDocs: undefined,
            }));
            setLoading(false);
            ctrl.abort();
          } else {
            const data = JSON.parse(event.data);
            if (data.sourceDocs) {
              setMessages((state) => ({
                ...state,
                pendingSourceDocs: data.sourceDocs,
              }));
            } else {
              setMessages((state) => ({
                ...state,
                pending: (state.pending ?? "") + data.data,
              }));
            }
          }
        },
      });
    } catch (error) {
      setLoading(false);
      setError("An error occurred while fetching the data. Please try again.");
      console.log("error", error);
    }
  }

  return (
    <>
      <Head>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        <div className="container mt-12 flex flex-col items-center justify-center gap-4 px-4 py-8">
          <ChatBox messages={messages} onSubmit={handleSubmit} />
        </div>
      </main>
    </>
  );
};

export default Home;
